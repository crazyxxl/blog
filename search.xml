<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CA证书签发与验证简述</title>
    <url>/2021/11/07/CA%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%8F%91%E4%B8%8E%E9%AA%8C%E8%AF%81%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>HTTP（超文本传输协议）是一种无状态的以明文传递数据的应用层协议，是当下使用最为广泛的应用层协议之一，但由于其数据是明文传递数据，我们可以通过抓包工具（如windows下使用wireshark，linux下tcpdump）获取到数据包，直接能看到程序所发送的数据，如图1-1所示，因此对于一些具有安全性需求的场合，HTTP就不够用了，为了解决HTTP所面临的安全性问题，提出了HTTPS的概念，HTTPS所做事情就是: 在发送端，将明文的数据加密传输，在接收端，将数据解密交给应用程序处理，http本省不具备该项能力，因此需要借助其他OSI七层模型中的其他层去完成，结合OSI七层（如图1.2）概念模型，其加解密是在表示层完成。</p>
<span id="more"></span>

<p>图1.1</p>
<p><img src="/images/https/ca/zhuabao-exapmle.png"></p>
<p>图1.2</p>
<p><img src="/images/https/ca/osi-7-level.svg"></p>
<h3 id="简述加密算法"><a href="#简述加密算法" class="headerlink" title="简述加密算法"></a>简述加密算法</h3><h4 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h4><p>非对称加密算法加密密钥与解密密钥不同，密钥产生过程相对较为复杂，在此处不做展开，加密方法是，对原始文档（需加密文档）的密钥次方对n（密钥生成时使用的一个较大的数，破解密钥是对其分解质因数）取模，由于由于文档以及密钥都较长，所以非对称加密较为耗时，只能针对较小数据量的数据进行加密，常见的非堆成加密算法有RSA，可汗学院有其加密算法的详细视频说明，感兴趣的小伙伴可以登录可汗学院学习</p>
<h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>非对称加密算法从使用场景上划分，作用有二：</p>
<ul>
<li>用于身份验证（证书申请与验证便用到了此项作用），在此场景下我们使用私钥对数据进行加密，使用公钥对数据进行解密，如何验证后文详述</li>
<li>用于数据加解密（常用场景），在此场景下，使用公钥加密，使用私钥解密</li>
</ul>
<h4 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h4><p>对称加密加密密钥与解密密钥相同，其加密算法核心要素是亦或运算，加密过程是使用原始文档（需加密文档）与加密密钥做亦或运算，其解密过程是使用密文与密钥取亦或运算，常用的对称加密算法有AES128/AES192/AES256等</p>
<h4 id="如何选择加密方式以及选择后面临的问题"><a href="#如何选择加密方式以及选择后面临的问题" class="headerlink" title="如何选择加密方式以及选择后面临的问题"></a>如何选择加密方式以及选择后面临的问题</h4><p>非对称加密法加密安全性更高但是其效率较差，因此如果使用其作为加解密算法的话，会使整个求情过程加长，降低传输效率，相比之下对称加解密只是对数据按位做亦或操作，加解密效率远高于非对称加密，因此一般对数据进行加密常用对称加密，但无论使用什么样的加密方式均会遇到一个重要的问题：如何确认当前通信的对象就是我们想要通信的对象，举个例子：张三与李四在电话，张三如何确认电话那端就是李四而不是王五，如下图所示：张三要与李四通讯，但是王五拦击了张三的数据包，并给张三返回其为李四，这种情况下，如果张三不做任何验证就开始后续的操作，那必然是数据泄露，因此需要张三对发送消息者身份进行验证，如何证明通信对端就是目标方也就是对对端传来的身份凭证进行验证需要一个权威性的第三方来确认，这个第三方便是CA</p>
<p><img src="/images/https/ca/why-do-we-need-ca.svg" alt="图1.1"></p>
<h3 id="CA简介"><a href="#CA简介" class="headerlink" title="CA简介"></a>CA简介</h3><p>CA全程是指certificate Authority，意为证书授权中心，其作用为作为权威的第三方机构，管理和签发数字证书</p>
<h4 id="证书分类"><a href="#证书分类" class="headerlink" title="证书分类"></a>证书分类</h4><p>CA证书从用途上分类，可分为以下三类：</p>
<p>DV：domain 域名验证证书，通常免费，安全等级最低 </p>
<p>OV：organization 组织验证证书，收费，安全等级相对较高</p>
<p>EV：extend扩展验证证书，费用较高，安全等级最高</p>
<p>细分详细内容可参考：</p>
<h4 id="证书签发流程详述"><a href="#证书签发流程详述" class="headerlink" title="证书签发流程详述"></a>证书签发流程详述</h4><p>签发过程如下图所示</p>
<p><img src="/images/https/ca/apply-ca-cer.svg" alt="图 证书签发过程详述"></p>
<h4 id="证书验证流程详述"><a href="#证书验证流程详述" class="headerlink" title="证书验证流程详述"></a>证书验证流程详述</h4><p>验证过程如下图所示：</p>
<p><img src="/images/https/ca/ca-verify.svg" alt="图证书验证过程详述"></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>Git commit message 规范</title>
    <url>/2022/02/19/Git%20commit%20message%20%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h3 id="Git-commit-message-提交规范"><a href="#Git-commit-message-提交规范" class="headerlink" title="Git commit message 提交规范"></a>Git commit message 提交规范</h3><p>git 在提交代码时，根据不同的提交类型需要添加不同的前缀以作区分，以便更加清晰的看出每次修改的类型以及内容，不同的团队以及公司有其不同的规范，在开发过程中个人常用的message 构成格式为：type: scope commit detail</p>
<p>常用的type包含以下几类：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>feat</td>
<td>提交功能新特性</td>
</tr>
<tr>
<td>fix</td>
<td>修改bug</td>
</tr>
<tr>
<td>refactor</td>
<td>在不影响现有既定功能的情况下重构代码</td>
</tr>
<tr>
<td>docs</td>
<td>文档修改</td>
</tr>
<tr>
<td>test</td>
<td>测试相关修改，用例增改</td>
</tr>
<tr>
<td>pref</td>
<td>性能提升类修改</td>
</tr>
<tr>
<td>style</td>
<td>代码格式修改，去除空行或者修改符号之类修改</td>
</tr>
<tr>
<td>build</td>
<td>项目构建类型修改</td>
</tr>
<tr>
<td>chore</td>
<td>日常任务，除却以上类型的其他类型</td>
</tr>
</tbody></table>
<p>scope：影响的范围，在项目中一般指代的是修改的模块</p>
<p>commit detail：具体修改项的详细描述</p>
<p><strong>遵守规范能有效提升工作以及学习效率，共勉</strong></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
