<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人笔记</title>
  
  <subtitle>小龙的学习笔记</subtitle>
  <link href="https://blog.hugo.pub/atom.xml" rel="self"/>
  
  <link href="https://blog.hugo.pub/"/>
  <updated>2022-04-19T07:00:41.038Z</updated>
  <id>https://blog.hugo.pub/</id>
  
  <author>
    <name>小龙</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CA证书签发与验证简述</title>
    <link href="https://blog.hugo.pub/2022/04/19/CA%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%8F%91%E4%B8%8E%E9%AA%8C%E8%AF%81%E7%AE%80%E8%BF%B0/"/>
    <id>https://blog.hugo.pub/2022/04/19/CA%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%8F%91%E4%B8%8E%E9%AA%8C%E8%AF%81%E7%AE%80%E8%BF%B0/</id>
    <published>2022-04-19T06:53:36.835Z</published>
    <updated>2022-04-19T07:00:41.038Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;HTTP（超文本传输协议）是一种无状态的以明文传递数据的应用层协议，是当下使用最为广泛的应用层协议之一，但由于其数据是明文传递数据，我们可以通过抓包工具（如windows下使用wireshark，linux下tcpdump）获取到数据包，直接能看到程序所发送的数据，如图1-1所示，因此对于一些具有安全性需求的场合，HTTP就不够用了，为了解决HTTP所面临的安全性问题，提出了HTTPS的概念，HTTPS所做事情就是: 在发送端，将明文的数据加密传输，在接收端，将数据解密交给应用程序处理，http本省不具备该项能力，因此需要借助其他OSI七层模型中的其他层去完成，结合OSI七层（如图1.2）概念模型，其加解密是在表示层完成。&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="https://blog.hugo.pub/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="https" scheme="https://blog.hugo.pub/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Git commit message 规范</title>
    <link href="https://blog.hugo.pub/2022/02/19/Git%20commit%20message%20%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/"/>
    <id>https://blog.hugo.pub/2022/02/19/Git%20commit%20message%20%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</id>
    <published>2022-02-19T07:34:21.390Z</published>
    <updated>2022-02-19T08:01:55.976Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;Git-commit-message-提交规范&quot;&gt;&lt;a href=&quot;#Git-commit-message-提交规范&quot; class=&quot;headerlink&quot; title=&quot;Git commit message 提交规范&quot;&gt;&lt;/a&gt;Git commit message 提交规范&lt;/h3&gt;&lt;p&gt;git 在提交代码时，根据不同的提交类型需要添加不同的前缀以作区分，以便更加清晰的看出每次修改的类型以及内容，不同的团队以及公司有其不同的规范，在开发过程中个人常用的message 构成格式为：type: scope commit detail&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="https://blog.hugo.pub/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="git" scheme="https://blog.hugo.pub/tags/git/"/>
    
  </entry>
  
</feed>
